const t=["utf8",".js","node_modules",".myClass","#myId","[","path","fs"],n=require(t[7]),e=require(t[6]),i="./",r=/'(?!(?:[A-Z_]+$|application\/|text\/|Content-Type|STRINGS\[\d+\]))([.#\[]?[a-zA-Z0-9\-_:\[\]\(\)\s>~+=*^|$]+)'/g,s=[/^$/,/^[A-Z_]+$/,/application\//,/^text\//,/Content-Type/,/STRINGS\[\d+\]/];let o=[];const c=new Map;function l(t,n){if(0===t.length)return!0;for(const e of s)if(e.toString()===/STRINGS\[\d+\]/.toString()){if(e.test(n))return!0}else if(e.test(t))return!0;return!1}function u(i,r=[]){return n.readdirSync(i).forEach((s=>{const o=e.join(i,s);n.statSync(o).isDirectory()?s!==t[2]&&u(o,r):e.extname(s)===t[1]&&r.push(o)})),r}function S(e){let i=n.readFileSync(e,t[0]),s=i;const u=[];let S;for(r.lastIndex=0;null!==(S=r.exec(i));)u.push(S);for(let t=u.length-1;t>=0;t--){const n=u[t],e=n[1],i=n[0];if(l(e,i))continue;let r;c.has(e)?r=c.get(e):(r=o.push(e)-1,c.set(e,r));const S=`CSS_SELECTORS[${r}]`;s=s.substring(0,n.index)+S+s.substring(n.index+i.length)}s=`const CSS_SELECTORS = ${JSON.stringify(o,null,2)};\n\n`+s,n.writeFileSync(e,s,t[0])}function f(){const t=u(i);0!==t.length&&(o=[],c.clear(),t.forEach(S))}f();